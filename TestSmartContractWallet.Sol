//SPDX-License-Identifier: MIT

pragma solidity 0.8.15;


contract Consumer {
    function getbalance() public view returns (uint) {
        return address(this).balance;

    }

    function deposit() public payable {

    }
}


contract SmartContractWallet {

    address payable public owner;

    mapping(address => uint) public allowance;
    mapping(address => bool) public isAllowedToSend;

    mapping(address => bool) public guardians;
    address payable nextOwner;
    mapping(address => mapping(address => bool)) nextOwnerGuardianVotedBool;
    uint guardiansResetCount;
    uint public constant confirmationFromGuardiansForReset = 3;

    constructor() {

        owner = payable (msg.sender);
    }

    function addGuardian(address _guardian, bool _isGuardian) public {
        require(msg.sender == owner, "you are not the owner, aborting");
        guardians[_guardian] = true;
    }

    function proposeNewOwner(address payable _newOwner) public {
        require(guardians[msg.sender], "you are not a guardian, go away");
        require(nextOwnerGuardianVotedBool[_newOwner][msg.sender] == false, "you already voted");
        if(_newOwner != nextOwner) {
            nextOwner = _newOwner;
            guardiansResetCount = 0;
        }

        guardiansResetCount++;

        if(guardiansResetCount >= confirmationFromGuardiansForReset) {
            owner = nextOwner;
            nextOwner = payable(address(0));
        }
    }

    function setAllowance(address _for, uint _amount) public {
        require(msg.sender == owner, "you are not the owner, aborting");

        allowance[_for] = _amount;

        if(_amount > 0) {
            isAllowedToSend[msg.sender] = true;
        } else {
            isAllowedToSend[_for] = false;
        }
    }

    function transfer(address payable _to, uint _amount, bytes memory _payload) public returns(bytes memory){
        require(msg.sender == owner, "you are not the owner, aborting") ;
        if(msg.sender!= owner) {
            require(allowance[msg.sender] >= _amount, "you are trying to send more than you are allowed to, aborting");
            require(allowance[msg.sender] >= _amount, "you are trying to send more than you are allowrd, aborting.");

            allowance[msg.sender] -= _amount;
        }

        (bool succes, bytes memory returnData) = _to.call{value: _amount}(_payload);
        require(succes, "aborting, call was not successful");
        return returnData;
    }

    receive() external payable {}


}